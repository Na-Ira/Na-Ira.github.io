import*as THREE from"./three.min.js";import{configuration}from"../config.js";var yAmp1=2,yAmp2=1,yFreq1=1,yFreq2=1,xAmp1=2.2,xAmp2=1.2,xFreq1=1,xFreq2=1,zAmp1=2.7,zAmp2=1,zFreq1=1.1,zFreq2=3;const vertex="\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\nuniform float time;\nvarying vec3 offset;\nvarying vec3 colorOffset;\nuniform float yAmp1;\nuniform float yAmp2;\nuniform float yFreq1;\nuniform float yFreq2;\nuniform float xAmp1;\nuniform float xAmp2;\nuniform float xFreq1;\nuniform float xFreq2;\nuniform float zAmp1;\nuniform float zAmp2;\nuniform float zFreq1;\nuniform float zFreq2;\nuniform int modulation;\n\nvoid main() \n{\n   if (modulation == 1) \n   {\n       offset.y = sin(position.x * yFreq1 * sin(time*0.5) + time*5.3) * yAmp1;\n       offset.y += sin(position.x * yFreq2 * sin(time*0.7) + time*3.4) * yAmp2;\n\n       offset.x = sin(position.z * xFreq1 * sin(time*0.3) + time*2.1) * xAmp1;\n       offset.x += sin(position.z * xFreq2 * sin(time*0.5) + time*1.1) * xAmp2;\n\n       offset.z = sin(position.y * zFreq1 * sin(time*0.1) + time*0.7) * zAmp1;\n       offset.z += sin(position.y * zFreq2 * sin(time*0.04) + time*0.3) * zAmp2;\n   } \n   else \n   {\n       offset.y = sin(position.x * yFreq1 + time*5.3) * yAmp1;\n       offset.y += sin(position.x * yFreq2 + time*3.4) * yAmp2;\n\n       offset.x = sin(position.z * xFreq1 + time*2.1) * xAmp1;\n       offset.x += sin(position.z * xFreq2 + time*1.1) * xAmp2;\n\n       offset.z = sin(position.y * zFreq1 + time*0.7) * zAmp1;\n       offset.z += sin(position.y * zFreq2 + time*0.3) * zAmp2;\n   }\n   \n\n   vec3 newPos = position + normal * offset;\n   colorOffset = newPos - position;\n   colorOffset = clamp(colorOffset, 0.0, 100.0);\n\n   gl_Position = projectionMatrix * modelViewMatrix * vec4( newPos, 1.0 );\n   vNormal = normalize( normalMatrix * normal );\n   vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n   vViewPosition = -mvPosition.xyz;\n\n}",fragmen="\nuniform vec3 uMaterialColor;\n\nuniform vec3 uDirLightPos;\nuniform vec3 uDirLightColor;\n\nuniform float uKd;\nuniform float uBorder;\n\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\n\nvarying vec3 offset;\nvarying vec3 colorOffset;\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\n\nuniform int doesLighting;\n\nvoid main() \n{\n   vec4 lDirection = viewMatrix * vec4( uDirLightPos, 0.0 );\n   vec3 lVector = normalize( lDirection.xyz );\n   vec3 normal = normalize( vNormal );\n   float diffuse = max( dot( normal, lVector ), 0.0);\n\n   vec3 newMatColor;\n   newMatColor.r += color1.r*colorOffset.x + color2.r*colorOffset.y + color3.r*colorOffset.z;\n   newMatColor.g += color1.g*colorOffset.x + color2.g*colorOffset.y + color3.g*colorOffset.z;\n   newMatColor.b += color1.b*colorOffset.x + color2.b*colorOffset.y + color3.b*colorOffset.z;\n\n   if (doesLighting==1) {\n       gl_FragColor = vec4( uKd * newMatColor * uDirLightColor * diffuse, 1.0 );\n   } else {\n       gl_FragColor = vec4( uKd * newMatColor, 1.0 );\n   }\n\n}";function hex2rgb(hex){return["0x"+hex[1]+hex[2]|0,"0x"+hex[3]+hex[4]|0,"0x"+hex[5]+hex[6]|0]}function lerp(x,y,a){return(1-a)*x+a*y}function scalePercent(start,end){return(scrollPercent-start)/(end-start)}let container;container=document.querySelector(".scene");var scene=new THREE.Scene;const fov=75,near=.1,far=400,aspect=container.clientWidth/container.clientHeight;var camera=new THREE.PerspectiveCamera(75,aspect,.1,400),mouse=new THREE.Vector3,target=new THREE.Vector3,windowHalf=new THREE.Vector3(window.innerWidth/1,window.innerHeight/1);camera.position.z=17;let pixelRatio=window.devicePixelRatio,AA=!0;pixelRatio>1&&(AA=!1);var renderer=new THREE.WebGLRenderer({alpha:!0,antialias:AA,powerPreference:"high-performance"});renderer.setSize(container.clientWidth,container.clientHeight),container.appendChild(renderer.domElement),renderer.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),renderer.toneMapping=THREE.ReinhardToneMapping;const color=16777215,intensity=1,light=new THREE.DirectionalLight(color,1);light.position.set(0,100,200);var ambientLight=new THREE.AmbientLight(16777215,3);scene.add(ambientLight);var sphereRes=configuration.quality,oldSphereRes=sphereRes,geometry=new THREE.IcosahedronGeometry(9,sphereRes),material=new THREE.MeshLambertMaterial,materialColor=new THREE.Color;materialColor.setRGB(0,.8,.1),material.color=materialColor.convertSRGBToLinear();var phongMaterial=createShaderMaterial("phongDiffuse",light);phongMaterial.uniforms.uMaterialColor.value.copy(materialColor.convertSRGBToLinear()),phongMaterial.side=THREE.DoubleSide,phongMaterial.wireframe=configuration.wireframe;var sphere=new THREE.Mesh(geometry,phongMaterial);scene.add(sphere),sphere.position.x=configuration.positionX,sphere.position.y=configuration.positionY,sphere.rotation.x=configuration.rotateX;var clock=new THREE.Clock,color1=new THREE.Color(hex2rgb(configuration.colorsgradient.gradientone)[0],hex2rgb(configuration.colorsgradient.gradientone)[1],hex2rgb(configuration.colorsgradient.gradientone)[2]),color2=new THREE.Color(hex2rgb(configuration.colorsgradient.gradienttwo)[0],hex2rgb(configuration.colorsgradient.gradienttwo)[1],hex2rgb(configuration.colorsgradient.gradienttwo)[2]),color3=new THREE.Color(hex2rgb(configuration.colorsgradient.gradienttree)[0],hex2rgb(configuration.colorsgradient.gradienttree)[1],hex2rgb(configuration.colorsgradient.gradienttree)[2]),uKd=1,waveSpeed=configuration.speedwave,rotationSpeed=configuration.rotatespeed,lighting=!0,modulation=configuration.modular;let geometrys=new THREE.SphereBufferGeometry(.1,2,2),materials=new THREE.MeshStandardMaterial({color:16777215});var isMobile={Android:function(){return navigator.userAgent.match(/Android/i)},BlackBerry:function(){return navigator.userAgent.match(/BlackBerry/i)},iOS:function(){return navigator.userAgent.match(/iPhone|iPad|iPod/i)},Opera:function(){return navigator.userAgent.match(/Opera Mini/i)},Windows:function(){return navigator.userAgent.match(/IEMobile/i)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Opera()||isMobile.Windows()}};if(!isMobile.any()){function onMouseMove(event){mouse.x=event.clientX-windowHalf.x,mouse.y=event.clientY-windowHalf.x}document.addEventListener("mousemove",onMouseMove,!1)}function addStar(){let stars=new THREE.Mesh(geometrys,materials);const[x,y,z]=Array(10).fill().map(()=>THREE.MathUtils.randFloatSpread(100));stars.position.set(x,y,z),scene.add(stars)}configuration.showstar&&Array(configuration.star).fill().forEach(addStar);const animationScripts=[];function playScrollAnimations(){animationScripts.forEach(a=>{scrollPercent>=a.start&&scrollPercent<a.end&&a.func()})}animationScripts.push({start:0,end:101,func:()=>{}}),animationScripts.push({start:0,end:0,func:()=>{camera.position.set(0,0,17),scene.position.set(0,0,0),scene.rotation.set(0,0,0)}}),animationScripts.push({start:0,end:40,func:()=>{camera.lookAt(scene.position),camera.position.set(0,1,2),scene.position.z=lerp(-18,0,scalePercent(0,100)),scene.rotation.set(0,0,0)}}),animationScripts.push({start:40,end:60,func:()=>{camera.lookAt(scene.position),scene.rotation.y=lerp(0,Math.PI,scalePercent(40,60))}}),animationScripts.push({start:60,end:80,func:()=>{camera.position.x=lerp(0,5,scalePercent(60,80)),camera.position.y=lerp(1,5,scalePercent(60,80)),camera.lookAt(scene.position)}}),animationScripts.push({start:80,end:90,func:()=>{camera.position.x=lerp(0,5,scalePercent(0,100)),camera.position.y=lerp(1,5,scalePercent(0,150)),camera.position.z=lerp(-18,0,scalePercent(0,100)),camera.lookAt(scene.position)}}),animationScripts.push({start:90,end:101,func:()=>{camera.lookAt(scene.position),camera.position.set(-18,0,scalePercent(0,100)),scene.rotation.x+=.01,scene.rotation.y+=.01}});let scrollPercent=0;function createShaderMaterial(id,light){var shaderTypes,shader={phongDiffuse:{uniforms:{uDirLightPos:{type:"v3",value:new THREE.Vector3},uDirLightColor:{type:"c",value:new THREE.Color(16777215)},uMaterialColor:{type:"c",value:new THREE.Color(16777215)},time:{type:"f",value:0},color1:{type:"c",value:new THREE.Color("rgb(0,0,255)")},color2:{type:"c",value:new THREE.Color("rgb(0,0,255)")},color3:{type:"c",value:new THREE.Color("rgb(0,0,255)")},doesLighting:{type:"i",value:1},modulation:{type:"i",value:1},uKd:{type:"f",value:.7},uBorder:{type:"f",value:.4},yAmp1:{type:"f",value:yAmp1},yAmp2:{type:"f",value:yAmp2},yFreq1:{type:"f",value:yFreq1},yFreq2:{type:"f",value:yFreq2},xAmp1:{type:"f",value:xAmp1},xAmp2:{type:"f",value:xAmp2},xFreq1:{type:"f",value:xFreq1},xFreq2:{type:"f",value:xFreq2},zAmp1:{type:"f",value:zAmp1},zAmp2:{type:"f",value:zAmp2},zFreq1:{type:"f",value:zFreq1},zFreq2:{type:"f",value:zFreq2}}}}[id],u=THREE.UniformsUtils.clone(shader.uniforms),vs=vertex,fs=fragmen,material=new THREE.ShaderMaterial({uniforms:u,vertexShader:vs,fragmentShader:fs});return material.uniforms.uDirLightPos.value=light.position,material.uniforms.uDirLightColor.value=light.color,material}function resizeRendererToDisplaySize(renderer){const canvas=renderer.domElement,width=canvas.clientWidth,height=canvas.clientHeight,needResize=canvas.width!==width||canvas.height!==height;return needResize&&renderer.setSize(width,height,!1),needResize}let then=0;function render(now){if(target.x=5e-4*(1-mouse.x),target.y=5e-4*(1-mouse.y),camera.rotation.x+=.05*(target.y-camera.rotation.x),camera.rotation.y+=.05*(target.x-camera.rotation.y),update(),renderer.render(scene,camera),then=now*=.001,resizeRendererToDisplaySize(renderer)){const canvas=renderer.domElement;camera.aspect=canvas.clientWidth/canvas.clientHeight,camera.updateProjectionMatrix()}requestAnimationFrame(render)}function update(){phongMaterial.uniforms.uMaterialColor.value.copy(materialColor),phongMaterial.uniforms.time.value+=clock.getDelta()*waveSpeed,phongMaterial.uniforms.uKd.value=uKd,phongMaterial.uniforms.doesLighting.value=lighting,phongMaterial.uniforms.modulation.value=modulation,phongMaterial.uniforms.color1.value.r=color1.r/255,phongMaterial.uniforms.color1.value.g=color1.g/255,phongMaterial.uniforms.color1.value.b=color1.b/255,phongMaterial.uniforms.color2.value.r=color2.r/255,phongMaterial.uniforms.color2.value.g=color2.g/255,phongMaterial.uniforms.color2.value.b=color2.b/255,phongMaterial.uniforms.color3.value.r=color3.r/255,phongMaterial.uniforms.color3.value.g=color3.g/255,phongMaterial.uniforms.color3.value.b=color3.b/255,phongMaterial.uniforms.yAmp1.value=yAmp1,phongMaterial.uniforms.yAmp2.value=yAmp2,phongMaterial.uniforms.yFreq1.value=yFreq1,phongMaterial.uniforms.yFreq2.value=yFreq2,phongMaterial.uniforms.xAmp1.value=xAmp1,phongMaterial.uniforms.xAmp2.value=xAmp2,phongMaterial.uniforms.xFreq1.value=xFreq1,phongMaterial.uniforms.xFreq2.value=xFreq2,phongMaterial.uniforms.zAmp1.value=zAmp1,phongMaterial.uniforms.zAmp2.value=zAmp2,phongMaterial.uniforms.zFreq1.value=zFreq1,phongMaterial.uniforms.zFreq2.value=zFreq2,sphere.rotation.x+=.001*rotationSpeed,sphere.rotation.y+=.002*rotationSpeed,sphere.rotation.z+=6e-4*rotationSpeed}function animate(){requestAnimationFrame(animate),isMobile.any()?configuration.animinmobile&&playScrollAnimations():playScrollAnimations()}render(),window.addEventListener("resize",(function(){var WIDTH=window.innerWidth,HEIGHT=window.innerHeight;renderer.setSize(WIDTH,HEIGHT),camera.aspect=WIDTH/HEIGHT,camera.updateProjectionMatrix()})),document.body.onscroll=()=>{scrollPercent=(document.documentElement.scrollTop||document.body.scrollTop)/((document.documentElement.scrollHeight||document.body.scrollHeight)-document.documentElement.clientHeight)*100},animate();